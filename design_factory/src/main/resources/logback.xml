<!-- scan="true" 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
%d{yyyy-MM-dd HH:mm:ss.S} %level [%thread] %caller{1} - %msg%n
-->
<!-- scanPeriod="30 seconds" 设置每30秒自动扫描,若没有指定具体单位则以milliseconds为标准(单位:milliseconds,
	seconds, minutes or hours)  [%thread] %-5level %logger{35} -->
<!-- debug="false"当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="30 seconds">
	<!-- 日志输出格式 %d{yyyy-MM-dd HH:mm:ss,S} # nas.kernal # %-5p # %l: # %m%n -->
	<!-- 日志输出格式 %d{yyyy-MM-dd HH:mm:ss} %-5level %logger{50} - %msg%n -->
	<property name="Pattern"
			  value="%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{50} - %msg%n" />
	<!-- 存放日志文件路径 -->
	<property name="Log_Home" value="E:/logs/design/chain" />

	<!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>${Pattern}</pattern>
		</encoder>
	</appender>

	<!-- DEBUG级别 -->
	<appender name="FILE_DEBUG"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 级别过滤器 -->
		<!--filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<File>${Log_Home}/debug/debug.log</File>
		<!-- 根据时间来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>
				${Log_Home}/debug/debug.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 多久后自动清楚旧的日志文件,单位:月 -->
			<MaxHistory>3</MaxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 默认值是 10MB,文档最大值 -->
				<MaxFileSize>10MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<Pattern>${Pattern}</Pattern>
		</encoder>
	</appender>

	<!-- INFO级别 -->
	<appender name="FILE_INFO"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<File>${Log_Home}/info/info.log</File>
		<!-- 根据时间来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>
				${Log_Home}/info/info.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 多久后自动清楚旧的日志文件,单位:月 -->
			<MaxHistory>7</MaxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 默认值是 10MB,文档最大值 -->
				<MaxFileSize>10MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<Pattern>${Pattern}</Pattern>
		</encoder>
	</appender>

	<!-- WARN级别 -->
	<appender name="FILE_WARN"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<File>${Log_Home}/warn/warn.log</File>
		<!-- 根据时间来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>
				${Log_Home}/warn/warn.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 多久后自动清楚旧的日志文件,单位:月 -->
			<MaxHistory>14</MaxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 默认值是 10MB,文档最大值 -->
				<MaxFileSize>10MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<Pattern>${Pattern}</Pattern>
		</encoder>
	</appender>


	<!-- ERROR级别 -->
	<appender name="FILE_ERROR"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
		</filter>
		<File>${Log_Home}/error/error.log</File>
		<!-- 根据时间来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>
				${Log_Home}/error/error.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 多久后自动清楚旧的日志文件,单位:月 -->
			<MaxHistory>30</MaxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 默认值是 10MB,文档最大值 -->
				<MaxFileSize>10MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<Pattern>${Pattern}</Pattern>
		</encoder>
	</appender>

	<!-- 控制java下面包的打印,没设置等级,将继承上级root的等级 -->
	<logger name="com.zhifeng" level="DEBUG" additivity="true">
		<appender-ref ref="FILE_DEBUG" />
	</logger>

	<!-- 当前日志总级别为TRACE、DEBUG、INFO、 WARN、ERROR、ALL和 OF -->
	<!-- the level of the root level is set to DEBUG by default. -->
	<root level="ERROR">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE_ERROR" />
	</root>
</configuration>